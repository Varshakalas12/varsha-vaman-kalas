#include <stdio.h>
#include <string.h>

int lenoflastword(char *s) {
    int length = 0;
    int i = strlen(s) - 1;

    
    while (i >= 0 && s[i] == ' ') {
        i--;
    }


    while (i >= 0 && s[i] != ' ') {
        length++;
        i--;
    }

    return length;
}

int main() {
    char input[100]; 
    
   
    scanf("%99[^\n]", input); 

    
    int ans = lenoflastword(input);
    printf("%d\n", ans);
    return 0;
}




hard1
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int isPalindrome(char* str, int start, int end) {
    while (start < end) {
        if (str[start] != str[end]) {
            return 0;
        }
        start++;
        end--;
    }
    return 1; 
}

char* shortestPalindrome(char* s) {
    int n = strlen(s);

    
    int end = n - 1;
    while (end > 0 && !isPalindrome(s, 0, end)) {
        end--;
    }

   
    char* result = (char*)malloc((2 * n - end - 1) * sizeof(char));
    int j = 0;
    for (int i = n - 1; i > end; i--) {
        result[j++] = s[i];
    }
    for (int i = 0; i < n; i++) {
        result[j++] = s[i];
    }
    result[j] = '\0';

    return result;
}

int main() {
    char s[100];  
    
    scanf("%s", s);

    char* result = shortestPalindrome(s);

    
    printf(" %s\n", result);

    free(result);

    return 0;
}
medium 1
#include <stdio.h>
#include <stdlib.h>


struct TreeNode {
    int val;
    struct TreeNode *left;
    struct TreeNode *right;
};


struct TreeNode *newNode(int val) {
    struct TreeNode *node = (struct TreeNode *)malloc(sizeof(struct TreeNode));
    node->val = val;
    node->left = node->right = NULL;
    return node;
}

struct TreeNode *lowestCommonAncestor(struct TreeNode *root, struct TreeNode *p, struct TreeNode *q) {
    while (root != NULL) {
        if (p->val < root->val && q->val < root->val) {
            
            root = root->left;
        } else if (p->val > root->val && q->val > root->val) {
            
            root = root->right;
        } else {
           
            return root;
        }
    }
    return NULL; 
}

int main() {
     int val_p, val_q;
    // Given input
    struct TreeNode *root = newNode(6);
    root->left = newNode(2);
    root->right = newNode(8);
    root->left->left = newNode(0);
    root->left->right = newNode(4);
    root->right->left = newNode(7);
    root->right->right = newNode(9);
    root->left->right->left = newNode(3);
    root->left->right->right = newNode(5);

    printf("Enter the values of nodes p and q: ");
    scanf("%d %d", &val_p, &val_q);

    struct TreeNode *p = newNode(val_p);
    struct TreeNode *q = newNode(val_q);

    struct TreeNode *lca = lowestCommonAncestor(root, p, q);
    if (lca != NULL) {
        printf("Lowest Common Ancestor: %d\n", lca->val);
    } else {
        printf("Lowest Common Ancestor not found.\n");
    }

    
    return 0;
}

